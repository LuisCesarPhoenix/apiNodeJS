O que cada pasta/arquivo faz?

api-crud-mysql/
â”œâ”€â”€ package.json                   <-- ðŸ“Œ Arquivo de configuraÃ§Ã£o do projeto (dependÃªncias, scripts, etc.)
â”œâ”€â”€ package-lock.json               <-- ðŸ“Œ Travamento de versÃµes exatas das dependÃªncias instaladas
â”œâ”€â”€ server.js                       <-- ðŸ“Œ Arquivo principal que inicializa o servidor Express
â”œâ”€â”€ .env                            <-- ðŸ“Œ VariÃ¡veis de ambiente (ex.: credenciais do banco, portas, etc.)
â”œâ”€â”€ src/                            <-- ðŸ“‚ DiretÃ³rio principal do cÃ³digo-fonte da aplicaÃ§Ã£o
â”‚   â”œâ”€â”€ config/                     <-- ðŸ“‚ ConfiguraÃ§Ã£o dos bancos de dados
â”‚   â”‚   â”œâ”€â”€ mysqlConfig.js          <-- âœ… ConfiguraÃ§Ã£o da conexÃ£o com o MySQL (sob demanda)
â”‚   â”‚   â”œâ”€â”€ mongoConfig.js          <-- âœ… ConfiguraÃ§Ã£o da conexÃ£o com o MongoDB (sob demanda)
â”‚   â”œâ”€â”€ routes/                     <-- ðŸ“‚ Define as rotas da API
â”‚   â”‚   â”œâ”€â”€ userRoutes.js           <-- âœ… Rotas de usuÃ¡rios (ex.: cadastro, login, atualizaÃ§Ã£o)
â”‚   â”‚   â”œâ”€â”€ migrationRoutes.js      <-- âœ… Rota para migraÃ§Ã£o de dados entre bancos
â”‚   â”‚   â”œâ”€â”€ fileProcessingRoutes.js <-- âœ… Rotas para processamento de arquivos CSV
â”‚   â”œâ”€â”€ controllers/                <-- ðŸ“‚ LÃ³gica de negÃ³cios das rotas
â”‚   â”‚   â”œâ”€â”€ userController.js       <-- âœ… LÃ³gica para gerenciar usuÃ¡rios no MySQL
â”‚   â”‚   â”œâ”€â”€ migrationController.js  <-- âœ… LÃ³gica para migraÃ§Ã£o de dados entre bancos
â”‚   â”‚   â”œâ”€â”€ fileProcessingController.js <-- âœ… LÃ³gica de processamento e higienizaÃ§Ã£o de arquivos CSV
â”‚   â”œâ”€â”€ services/                   <-- ðŸ“‚ ServiÃ§os auxiliares reutilizÃ¡veis
â”‚   â”‚   â”œâ”€â”€ fileService.js          <-- âœ… ContÃ©m funÃ§Ãµes auxiliares para manipulaÃ§Ã£o de arquivos
â”œâ”€â”€ storage/                        <-- ðŸ“‚ DiretÃ³rio onde os arquivos CSV sÃ£o armazenados e processados
â”‚   â”œâ”€â”€ work/                       <-- ðŸ“‚ Arquivos brutos aguardando processamento
â”‚   â”‚   â”œâ”€â”€ file.csv                
â”‚   â”œâ”€â”€ temporÃ¡rio/                 <-- ðŸ“‚ Arquivos que estÃ£o sendo processados no momento
â”‚   â”œâ”€â”€ finalizado/                 <-- ðŸ“‚ Arquivos processados e finalizados
â”‚   â”‚   â”œâ”€â”€ file_finalizado.csv     


1. server.js - Arquivo principal do servidor

ResponsÃ¡vel por:
-Iniciar o servidor Express
-Carregar as rotas da aplicaÃ§Ã£o
-NÃ£o conecta diretamente ao banco, garantindo eficiÃªncia

Fluxo de execuÃ§Ã£o:
1-Importa pacotes (dotenv, express)
2-Carrega as rotas (userRoutes, migrationRoutes, fileProcessingRoutes)
3-Inicia o servidor na porta definida no .env

2. .env - ConfiguraÃ§Ã£o de variÃ¡veis de ambiente

ResponsÃ¡vel por:
-Armazenar configuraÃ§Ãµes sensÃ­veis (senhas, URLs do banco, porta do servidor)
-Permite modificar as configuraÃ§Ãµes sem alterar o cÃ³digo-fonte

3. src/config/mysqlConfig.js - ConfiguraÃ§Ã£o da conexÃ£o MySQL sob demanda

ResponsÃ¡vel por:
-Criar conexÃµes com o banco MySQL apenas quando necessÃ¡rio
-Retornar uma instÃ¢ncia da conexÃ£o
-Evitar conexÃµes permanentes que desperdiÃ§am recursos

Fluxo de execuÃ§Ã£o:
1-Importa mysql2/promise
2-Cria a funÃ§Ã£o connectToMySQL() que conecta e retorna a conexÃ£o
3-Quando chamada, a funÃ§Ã£o conecta e permite fazer queries

4. src/config/mongoConfig.js - ConfiguraÃ§Ã£o da conexÃ£o MongoDB sob demanda

ResponsÃ¡vel por:
-Criar conexÃµes com o MongoDB apenas quando necessÃ¡rio
-Retornar uma instÃ¢ncia da conexÃ£o
-Fechar a conexÃ£o apÃ³s cada requisiÃ§Ã£o

Fluxo de execuÃ§Ã£o:
1-Importa MongoClient do pacote mongodb
2-Define a funÃ§Ã£o connectToMongoDB() que cria e retorna uma conexÃ£o
3-O banco sÃ³ Ã© acessado quando chamado e fechado logo depois

5. src/routes/userRoutes.js - Rotas para usuÃ¡rios

ResponsÃ¡vel por:
-Definir as rotas para operaÃ§Ãµes relacionadas a usuÃ¡rios
-Delegar a execuÃ§Ã£o para o userController.js

Fluxo de execuÃ§Ã£o:
1-Importa express e o userController
2-Cria um router e define as rotas (exemplo: GET /users)
3-Exporta o router para ser usado no server.js

6. src/controllers/userController.js - LÃ³gica de usuÃ¡rios

ResponsÃ¡vel por:
-Executar operaÃ§Ãµes relacionadas a usuÃ¡rios no MySQL
-Abrir e fechar conexÃµes corretamente

Fluxo de execuÃ§Ã£o:
1-Conecta ao MySQL
2-Executa uma query (SELECT * FROM users)
3-Retorna os resultados e fecha a conexÃ£o apÃ³s a consulta

7. src/routes/migrationRoutes.js - Rota para migraÃ§Ã£o

ResponsÃ¡vel por:
-Criar uma rota que dispara a migraÃ§Ã£o de dados entre bancos MongoDB
-Chamar a funÃ§Ã£o migrateData do migrationController.js

Fluxo de execuÃ§Ã£o:
1-Define uma rota POST /migrate
2-Chama o controller migrateData

8. src/controllers/migrationController.js - LÃ³gica de migraÃ§Ã£o

ResponsÃ¡vel por:
-Migrar dados de um banco MongoDB para outro
-Abrir e fechar a conexÃ£o automaticamente

Fluxo de execuÃ§Ã£o:
1-Abre uma conexÃ£o MongoDB (connectToMongoDB())
2-Busca os dados na coleÃ§Ã£o de origem (cadastro_A)
3-Insere os dados na coleÃ§Ã£o de destino (cadastro_B) em lotes
4-Fecha a conexÃ£o ao final

9. src/routes/fileProcessingRoutes.js - Rotas para processamento de arquivos

ResponsÃ¡vel por:
-Definir as rotas para processamento de arquivos CSV
-Delegar a lÃ³gica para o fileProcessingController.js

Fluxo de execuÃ§Ã£o:
1-Importa express e fileProcessingController
2-Cria um router e define a rota POST /process
3-Exporta o router para ser usado no server.js

10. src/controllers/fileProcessingController.js - LÃ³gica para processar arquivos CSV

ResponsÃ¡vel por:
-Processar arquivos CSV em chunks para evitar estouro de memÃ³ria
-Aplicar higienizaÃ§Ã£o nos dados
-Mover arquivos entre as pastas work, temporÃ¡rio e finalizado

Fluxo de execuÃ§Ã£o:
1-Recebe uma lista de arquivos via requisiÃ§Ã£o POST /process
2-Verifica se os arquivos existem na pasta work/
3-LÃª cada arquivo CSV em chunks (exemplo: 1000 linhas por vez)
4-Aplica a higienizaÃ§Ã£o (trim() e replace(/\s+/g, " "))
5-Escreve os arquivos processados na pasta temporÃ¡rio/
6-Move os arquivos para finalizado/ apÃ³s o processamento

11. storage/ - DiretÃ³rio para manipulaÃ§Ã£o de arquivos

ResponsÃ¡vel por:
-Armazenar os arquivos CSV antes, durante e depois do processamento

Subpastas:
-work/ â†’ ContÃ©m os arquivos CSV brutos aguardando processamento
-temporÃ¡rio/ â†’ Armazena arquivos enquanto estÃ£o sendo processados
-finalizado/ â†’ Guarda os arquivos processados
